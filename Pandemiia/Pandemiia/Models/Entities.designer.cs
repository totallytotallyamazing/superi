#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Pandemiia.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="Pandemic")]
	public partial class EntitiesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEntity(Entity instance);
    partial void UpdateEntity(Entity instance);
    partial void DeleteEntity(Entity instance);
    partial void InsertEntitySource(EntitySource instance);
    partial void UpdateEntitySource(EntitySource instance);
    partial void DeleteEntitySource(EntitySource instance);
    partial void InsertEntityType(EntityType instance);
    partial void UpdateEntityType(EntityType instance);
    partial void DeleteEntityType(EntityType instance);
    #endregion
		
		public EntitiesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["PandemicConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public EntitiesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EntitiesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EntitiesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public EntitiesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Entity> Entities
		{
			get
			{
				return this.GetTable<Entity>();
			}
		}
		
		public System.Data.Linq.Table<EntitySource> EntitySources
		{
			get
			{
				return this.GetTable<EntitySource>();
			}
		}
		
		public System.Data.Linq.Table<EntityType> EntityTypes
		{
			get
			{
				return this.GetTable<EntityType>();
			}
		}
	}
	
	[Table(Name="dbo.Entities")]
	public partial class Entity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Title;
		
		private System.Nullable<System.DateTime> _Date;
		
		private string _Description;
		
		private string _Content;
		
		private System.Nullable<int> _TypeID;
		
		private System.Nullable<int> _SourceID;
		
		private EntityRef<EntityType> _EntityType;
		
		private EntityRef<EntitySource> _EntitySource;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnTypeIDChanging(System.Nullable<int> value);
    partial void OnTypeIDChanged();
    partial void OnSourceIDChanging(System.Nullable<int> value);
    partial void OnSourceIDChanged();
    #endregion
		
		public Entity()
		{
			this._EntityType = default(EntityRef<EntityType>);
			this._EntitySource = default(EntityRef<EntitySource>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(1000)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="VarChar(2000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Content", DbType="VarChar(MAX)")]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[Column(Storage="_TypeID", DbType="Int")]
		public System.Nullable<int> TypeID
		{
			get
			{
				return this._TypeID;
			}
			set
			{
				if ((this._TypeID != value))
				{
					if (this._EntityType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeIDChanging(value);
					this.SendPropertyChanging();
					this._TypeID = value;
					this.SendPropertyChanged("TypeID");
					this.OnTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_SourceID", DbType="Int")]
		public System.Nullable<int> SourceID
		{
			get
			{
				return this._SourceID;
			}
			set
			{
				if ((this._SourceID != value))
				{
					if (this._EntitySource.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSourceIDChanging(value);
					this.SendPropertyChanging();
					this._SourceID = value;
					this.SendPropertyChanged("SourceID");
					this.OnSourceIDChanged();
				}
			}
		}
		
		[Association(Name="EntityType_Entity", Storage="_EntityType", ThisKey="TypeID", OtherKey="ID", IsForeignKey=true)]
		public EntityType EntityType
		{
			get
			{
				return this._EntityType.Entity;
			}
			set
			{
				EntityType previousValue = this._EntityType.Entity;
				if (((previousValue != value) 
							|| (this._EntityType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EntityType.Entity = null;
						previousValue.Entities.Remove(this);
					}
					this._EntityType.Entity = value;
					if ((value != null))
					{
						value.Entities.Add(this);
						this._TypeID = value.ID;
					}
					else
					{
						this._TypeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("EntityType");
				}
			}
		}
		
		[Association(Name="EntitySource_Entity", Storage="_EntitySource", ThisKey="SourceID", OtherKey="ID", IsForeignKey=true)]
		public EntitySource EntitySource
		{
			get
			{
				return this._EntitySource.Entity;
			}
			set
			{
				EntitySource previousValue = this._EntitySource.Entity;
				if (((previousValue != value) 
							|| (this._EntitySource.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EntitySource.Entity = null;
						previousValue.Entities.Remove(this);
					}
					this._EntitySource.Entity = value;
					if ((value != null))
					{
						value.Entities.Add(this);
						this._SourceID = value.ID;
					}
					else
					{
						this._SourceID = default(Nullable<int>);
					}
					this.SendPropertyChanged("EntitySource");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.EntitySources")]
	public partial class EntitySource : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<int> _ID;
		
		private string _Name;
		
		private EntitySet<Entity> _Entities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Nullable<int> value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public EntitySource()
		{
			this._Entities = new EntitySet<Entity>(new Action<Entity>(this.attach_Entities), new Action<Entity>(this.detach_Entities));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Nullable<int> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(250)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="EntitySource_Entity", Storage="_Entities", ThisKey="ID", OtherKey="SourceID")]
		public EntitySet<Entity> Entities
		{
			get
			{
				return this._Entities;
			}
			set
			{
				this._Entities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Entities(Entity entity)
		{
			this.SendPropertyChanging();
			entity.EntitySource = this;
		}
		
		private void detach_Entities(Entity entity)
		{
			this.SendPropertyChanging();
			entity.EntitySource = null;
		}
	}
	
	[Table(Name="dbo.EntityType")]
	public partial class EntityType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<int> _ID;
		
		private string _Name;
		
		private EntitySet<Entity> _Entities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Nullable<int> value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public EntityType()
		{
			this._Entities = new EntitySet<Entity>(new Action<Entity>(this.attach_Entities), new Action<Entity>(this.detach_Entities));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Nullable<int> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(250)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="EntityType_Entity", Storage="_Entities", ThisKey="ID", OtherKey="TypeID")]
		public EntitySet<Entity> Entities
		{
			get
			{
				return this._Entities;
			}
			set
			{
				this._Entities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Entities(Entity entity)
		{
			this.SendPropertyChanging();
			entity.EntityType = this;
		}
		
		private void detach_Entities(Entity entity)
		{
			this.SendPropertyChanging();
			entity.EntityType = null;
		}
	}
}
#pragma warning restore 1591
