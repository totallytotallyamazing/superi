#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[System.Data.Linq.Mapping.DatabaseAttribute(Name="tinakar_content")]
public partial class TourDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertTour(Tour instance);
  partial void UpdateTour(Tour instance);
  partial void DeleteTour(Tour instance);
  partial void InsertTourPicture(TourPicture instance);
  partial void UpdateTourPicture(TourPicture instance);
  partial void DeleteTourPicture(TourPicture instance);
  #endregion
	
	public TourDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["_1gb_TinaConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public TourDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public TourDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public TourDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public TourDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Tour> Tours
	{
		get
		{
			return this.GetTable<Tour>();
		}
	}
	
	public System.Data.Linq.Table<TourPicture> TourPictures
	{
		get
		{
			return this.GetTable<TourPicture>();
		}
	}
}

[Table(Name="dbo.Tours")]
public partial class Tour : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Name;
	
	private int _Year;
	
	private string _LeftText;
	
	private string _RightTitle;
	
	private string _RightSubTitle;
	
	private string _RightText;
	
	private string _BackgroundImage;
	
	private bool _BlackText;
	
	private string _LeftTextColor;
	
	private EntitySet<TourPicture> _TourPictures;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    partial void OnLeftTextChanging(string value);
    partial void OnLeftTextChanged();
    partial void OnRightTitleChanging(string value);
    partial void OnRightTitleChanged();
    partial void OnRightSubTitleChanging(string value);
    partial void OnRightSubTitleChanged();
    partial void OnRightTextChanging(string value);
    partial void OnRightTextChanged();
    partial void OnBackgroundImageChanging(string value);
    partial void OnBackgroundImageChanged();
    partial void OnBlackTextChanging(bool value);
    partial void OnBlackTextChanged();
    partial void OnLeftTextColorChanging(string value);
    partial void OnLeftTextColorChanged();
    #endregion
	
	public Tour()
	{
		this._TourPictures = new EntitySet<TourPicture>(new Action<TourPicture>(this.attach_TourPictures), new Action<TourPicture>(this.detach_TourPictures));
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="VarChar(500)")]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Year", DbType="Int NOT NULL")]
	public int Year
	{
		get
		{
			return this._Year;
		}
		set
		{
			if ((this._Year != value))
			{
				this.OnYearChanging(value);
				this.SendPropertyChanging();
				this._Year = value;
				this.SendPropertyChanged("Year");
				this.OnYearChanged();
			}
		}
	}
	
	[Column(Storage="_LeftText", DbType="VarChar(MAX)")]
	public string LeftText
	{
		get
		{
			return this._LeftText;
		}
		set
		{
			if ((this._LeftText != value))
			{
				this.OnLeftTextChanging(value);
				this.SendPropertyChanging();
				this._LeftText = value;
				this.SendPropertyChanged("LeftText");
				this.OnLeftTextChanged();
			}
		}
	}
	
	[Column(Storage="_RightTitle", DbType="VarChar(500)")]
	public string RightTitle
	{
		get
		{
			return this._RightTitle;
		}
		set
		{
			if ((this._RightTitle != value))
			{
				this.OnRightTitleChanging(value);
				this.SendPropertyChanging();
				this._RightTitle = value;
				this.SendPropertyChanged("RightTitle");
				this.OnRightTitleChanged();
			}
		}
	}
	
	[Column(Storage="_RightSubTitle", DbType="VarChar(500)")]
	public string RightSubTitle
	{
		get
		{
			return this._RightSubTitle;
		}
		set
		{
			if ((this._RightSubTitle != value))
			{
				this.OnRightSubTitleChanging(value);
				this.SendPropertyChanging();
				this._RightSubTitle = value;
				this.SendPropertyChanged("RightSubTitle");
				this.OnRightSubTitleChanged();
			}
		}
	}
	
	[Column(Storage="_RightText", DbType="VarChar(MAX)")]
	public string RightText
	{
		get
		{
			return this._RightText;
		}
		set
		{
			if ((this._RightText != value))
			{
				this.OnRightTextChanging(value);
				this.SendPropertyChanging();
				this._RightText = value;
				this.SendPropertyChanged("RightText");
				this.OnRightTextChanged();
			}
		}
	}
	
	[Column(Storage="_BackgroundImage", DbType="VarChar(255)")]
	public string BackgroundImage
	{
		get
		{
			return this._BackgroundImage;
		}
		set
		{
			if ((this._BackgroundImage != value))
			{
				this.OnBackgroundImageChanging(value);
				this.SendPropertyChanging();
				this._BackgroundImage = value;
				this.SendPropertyChanged("BackgroundImage");
				this.OnBackgroundImageChanged();
			}
		}
	}
	
	[Column(Storage="_BlackText", DbType="bit")]
	public bool BlackText
	{
		get
		{
			return this._BlackText;
		}
		set
		{
			if ((this._BlackText != value))
			{
				this.OnBlackTextChanging(value);
				this.SendPropertyChanging();
				this._BlackText = value;
				this.SendPropertyChanged("BlackText");
				this.OnBlackTextChanged();
			}
		}
	}
	
	[Column(Storage="_LeftTextColor", DbType="varchar(7)")]
	public string LeftTextColor
	{
		get
		{
			return this._LeftTextColor;
		}
		set
		{
			if ((this._LeftTextColor != value))
			{
				this.OnLeftTextColorChanging(value);
				this.SendPropertyChanging();
				this._LeftTextColor = value;
				this.SendPropertyChanged("LeftTextColor");
				this.OnLeftTextColorChanged();
			}
		}
	}
	
	[Association(Name="Tour_TourPicture", Storage="_TourPictures", ThisKey="ID", OtherKey="TourID")]
	public EntitySet<TourPicture> TourPictures
	{
		get
		{
			return this._TourPictures;
		}
		set
		{
			this._TourPictures.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_TourPictures(TourPicture entity)
	{
		this.SendPropertyChanging();
		entity.Tour = this;
	}
	
	private void detach_TourPictures(TourPicture entity)
	{
		this.SendPropertyChanging();
		entity.Tour = null;
	}
}

[Table(Name="dbo.TourPictures")]
public partial class TourPicture : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _Picture;
	
	private string _Preview;
	
	private int _TourID;
	
	private int _SortOrder;
	
	private EntityRef<Tour> _Tour;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPictureChanging(string value);
    partial void OnPictureChanged();
    partial void OnPreviewChanging(string value);
    partial void OnPreviewChanged();
    partial void OnTourIDChanging(int value);
    partial void OnTourIDChanged();
    partial void OnSortOrderChanging(int value);
    partial void OnSortOrderChanged();
    #endregion
	
	public TourPicture()
	{
		this._Tour = default(EntityRef<Tour>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Picture", DbType="VarChar(255)")]
	public string Picture
	{
		get
		{
			return this._Picture;
		}
		set
		{
			if ((this._Picture != value))
			{
				this.OnPictureChanging(value);
				this.SendPropertyChanging();
				this._Picture = value;
				this.SendPropertyChanged("Picture");
				this.OnPictureChanged();
			}
		}
	}
	
	[Column(Storage="_Preview", DbType="VarChar(255)")]
	public string Preview
	{
		get
		{
			return this._Preview;
		}
		set
		{
			if ((this._Preview != value))
			{
				this.OnPreviewChanging(value);
				this.SendPropertyChanging();
				this._Preview = value;
				this.SendPropertyChanged("Preview");
				this.OnPreviewChanged();
			}
		}
	}
	
	[Column(Storage="_TourID", DbType="Int NOT NULL")]
	public int TourID
	{
		get
		{
			return this._TourID;
		}
		set
		{
			if ((this._TourID != value))
			{
				if (this._Tour.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTourIDChanging(value);
				this.SendPropertyChanging();
				this._TourID = value;
				this.SendPropertyChanged("TourID");
				this.OnTourIDChanged();
			}
		}
	}
	
	[Column(Storage="_SortOrder", DbType="int")]
	public int SortOrder
	{
		get
		{
			return this._SortOrder;
		}
		set
		{
			if ((this._SortOrder != value))
			{
				this.OnSortOrderChanging(value);
				this.SendPropertyChanging();
				this._SortOrder = value;
				this.SendPropertyChanged("SortOrder");
				this.OnSortOrderChanged();
			}
		}
	}
	
	[Association(Name="Tour_TourPicture", Storage="_Tour", ThisKey="TourID", OtherKey="ID", IsForeignKey=true)]
	public Tour Tour
	{
		get
		{
			return this._Tour.Entity;
		}
		set
		{
			Tour previousValue = this._Tour.Entity;
			if (((previousValue != value) 
						|| (this._Tour.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Tour.Entity = null;
					previousValue.TourPictures.Remove(this);
				}
				this._Tour.Entity = value;
				if ((value != null))
				{
					value.TourPictures.Add(this);
					this._TourID = value.ID;
				}
				else
				{
					this._TourID = default(int);
				}
				this.SendPropertyChanged("Tour");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
