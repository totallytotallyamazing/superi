#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[System.Data.Linq.Mapping.DatabaseAttribute(Name="1gb_Maestro")]
public partial class GamesDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertTeam(Team instance);
  partial void UpdateTeam(Team instance);
  partial void DeleteTeam(Team instance);
  partial void InsertGame(Game instance);
  partial void UpdateGame(Game instance);
  partial void DeleteGame(Game instance);
  #endregion
	
	public GamesDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["_1gb_MaestroConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public GamesDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public GamesDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public GamesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public GamesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Team> Teams
	{
		get
		{
			return this.GetTable<Team>();
		}
	}
	
	public System.Data.Linq.Table<Game> Games
	{
		get
		{
			return this.GetTable<Game>();
		}
	}
}

[Table(Name="dbo.Teams")]
public partial class Team : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private System.Nullable<int> _NameTextId;
	
	private string _Logo;
	
	private System.Nullable<int> _DescriptionTextId;
	
	private EntitySet<Game> _Games;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameTextIdChanging(System.Nullable<int> value);
    partial void OnNameTextIdChanged();
    partial void OnLogoChanging(string value);
    partial void OnLogoChanged();
    partial void OnDescriptionTextIdChanging(System.Nullable<int> value);
    partial void OnDescriptionTextIdChanged();
    #endregion
	
	public Team()
	{
		this._Games = new EntitySet<Game>(new Action<Game>(this.attach_Games), new Action<Game>(this.detach_Games));
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_NameTextId", DbType="Int")]
	public System.Nullable<int> NameTextId
	{
		get
		{
			return this._NameTextId;
		}
		set
		{
			if ((this._NameTextId != value))
			{
				this.OnNameTextIdChanging(value);
				this.SendPropertyChanging();
				this._NameTextId = value;
				this.SendPropertyChanged("NameTextId");
				this.OnNameTextIdChanged();
			}
		}
	}
	
	[Column(Storage="_Logo", DbType="VarChar(50)")]
	public string Logo
	{
		get
		{
			return this._Logo;
		}
		set
		{
			if ((this._Logo != value))
			{
				this.OnLogoChanging(value);
				this.SendPropertyChanging();
				this._Logo = value;
				this.SendPropertyChanged("Logo");
				this.OnLogoChanged();
			}
		}
	}
	
	[Column(Storage="_DescriptionTextId", DbType="int")]
	public System.Nullable<int> DescriptionTextId
	{
		get
		{
			return this._DescriptionTextId;
		}
		set
		{
			if ((this._DescriptionTextId != value))
			{
				this.OnDescriptionTextIdChanging(value);
				this.SendPropertyChanging();
				this._DescriptionTextId = value;
				this.SendPropertyChanged("DescriptionTextId");
				this.OnDescriptionTextIdChanged();
			}
		}
	}
	
	[Association(Name="Team_Game", Storage="_Games", ThisKey="ID", OtherKey="TeamID")]
	public EntitySet<Game> Games
	{
		get
		{
			return this._Games;
		}
		set
		{
			this._Games.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Games(Game entity)
	{
		this.SendPropertyChanging();
		entity.Team = this;
	}
	
	private void detach_Games(Game entity)
	{
		this.SendPropertyChanging();
		entity.Team = null;
	}
}

[Table(Name="dbo.Games")]
public partial class Game : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private System.Nullable<System.DateTime> _Date;
	
	private System.Nullable<int> _TeamID;
	
	private System.Nullable<int> _HostCount;
	
	private System.Nullable<int> _TeamCount;
	
	private bool _Played;
	
	private int _HostCommentsTextID;
	
	private int _TeamCommentsTextID;
	
	private EntityRef<Team> _Team;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnTeamIDChanging(System.Nullable<int> value);
    partial void OnTeamIDChanged();
    partial void OnHostCountChanging(System.Nullable<int> value);
    partial void OnHostCountChanged();
    partial void OnTeamCountChanging(System.Nullable<int> value);
    partial void OnTeamCountChanged();
    partial void OnPlayedChanging(bool value);
    partial void OnPlayedChanged();
    partial void OnHostCommentsTextIDChanging(int value);
    partial void OnHostCommentsTextIDChanged();
    partial void OnTeamCommentsTextIDChanging(int value);
    partial void OnTeamCommentsTextIDChanged();
    #endregion
	
	public Game()
	{
		this._Team = default(EntityRef<Team>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Date", DbType="DateTime")]
	public System.Nullable<System.DateTime> Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[Column(Storage="_TeamID", DbType="Int")]
	public System.Nullable<int> TeamID
	{
		get
		{
			return this._TeamID;
		}
		set
		{
			if ((this._TeamID != value))
			{
				if (this._Team.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTeamIDChanging(value);
				this.SendPropertyChanging();
				this._TeamID = value;
				this.SendPropertyChanged("TeamID");
				this.OnTeamIDChanged();
			}
		}
	}
	
	[Column(Storage="_HostCount", DbType="Int")]
	public System.Nullable<int> HostCount
	{
		get
		{
			return this._HostCount;
		}
		set
		{
			if ((this._HostCount != value))
			{
				this.OnHostCountChanging(value);
				this.SendPropertyChanging();
				this._HostCount = value;
				this.SendPropertyChanged("HostCount");
				this.OnHostCountChanged();
			}
		}
	}
	
	[Column(Storage="_TeamCount", DbType="Int")]
	public System.Nullable<int> TeamCount
	{
		get
		{
			return this._TeamCount;
		}
		set
		{
			if ((this._TeamCount != value))
			{
				this.OnTeamCountChanging(value);
				this.SendPropertyChanging();
				this._TeamCount = value;
				this.SendPropertyChanged("TeamCount");
				this.OnTeamCountChanged();
			}
		}
	}
	
	[Column(Storage="_Played", DbType="Bit NOT NULL")]
	public bool Played
	{
		get
		{
			return this._Played;
		}
		set
		{
			if ((this._Played != value))
			{
				this.OnPlayedChanging(value);
				this.SendPropertyChanging();
				this._Played = value;
				this.SendPropertyChanged("Played");
				this.OnPlayedChanged();
			}
		}
	}
	
	[Column(Storage="_HostCommentsTextID", DbType="int NOT NULL")]
	public int HostCommentsTextID
	{
		get
		{
			return this._HostCommentsTextID;
		}
		set
		{
			if ((this._HostCommentsTextID != value))
			{
				this.OnHostCommentsTextIDChanging(value);
				this.SendPropertyChanging();
				this._HostCommentsTextID = value;
				this.SendPropertyChanged("HostCommentsTextID");
				this.OnHostCommentsTextIDChanged();
			}
		}
	}
	
	[Column(Storage="_TeamCommentsTextID", DbType="int NOT NULL")]
	public int TeamCommentsTextID
	{
		get
		{
			return this._TeamCommentsTextID;
		}
		set
		{
			if ((this._TeamCommentsTextID != value))
			{
				this.OnTeamCommentsTextIDChanging(value);
				this.SendPropertyChanging();
				this._TeamCommentsTextID = value;
				this.SendPropertyChanged("TeamCommentsTextID");
				this.OnTeamCommentsTextIDChanged();
			}
		}
	}
	
	[Association(Name="Team_Game", Storage="_Team", ThisKey="TeamID", OtherKey="ID", IsForeignKey=true)]
	public Team Team
	{
		get
		{
			return this._Team.Entity;
		}
		set
		{
			Team previousValue = this._Team.Entity;
			if (((previousValue != value) 
						|| (this._Team.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Team.Entity = null;
					previousValue.Games.Remove(this);
				}
				this._Team.Entity = value;
				if ((value != null))
				{
					value.Games.Add(this);
					this._TeamID = value.ID;
				}
				else
				{
					this._TeamID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Team");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
