<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CarSearch" xml:space="preserve">
    <value>Car Search</value>
  </data>
  <data name="Catalogue" xml:space="preserve">
    <value>Catalogue</value>
  </data>
  <data name="Business" xml:space="preserve">
    <value>Business</value>
  </data>
  <data name="Classes" xml:space="preserve">
    <value>Classes</value>
  </data>
  <data name="Middle" xml:space="preserve">
    <value>Middle</value>
  </data>
  <data name="Minivan" xml:space="preserve">
    <value>Minivans</value>
  </data>
  <data name="Multivan" xml:space="preserve">
    <value>Multyvans</value>
  </data>
  <data name="Standard" xml:space="preserve">
    <value>Standard</value>
  </data>
  <data name="Conditions" xml:space="preserve">
    <value>Conditions</value>
  </data>
  <data name="Contacts" xml:space="preserve">
    <value>Contacts</value>
  </data>
  <data name="Copyright" xml:space="preserve">
    <value>© 2010 Transfer service “TRIPS”</value>
  </data>
  <data name="Design" xml:space="preserve">
    <value>design</value>
  </data>
  <data name="LanguageSwitch" xml:space="preserve">
    <value>по-русски</value>
  </data>
  <data name="Lux" xml:space="preserve">
    <value>Lux</value>
  </data>
  <data name="MBrand" xml:space="preserve">
    <value>M.brand</value>
  </data>
  <data name="Phones" xml:space="preserve">
    <value>Our Phones</value>
  </data>
  <data name="Request" xml:space="preserve">
    <value>Order</value>
  </data>
  <data name="OurCatalogue" xml:space="preserve">
    <value>Our catalogue</value>
  </data>
  <data name="AddCar" xml:space="preserve">
    <value>Add car</value>
  </data>
  <data name="WasAdded" xml:space="preserve">
    <value>was added to the request</value>
  </data>
  <data name="ProceedOrder" xml:space="preserve">
    <value>Proceed to the request</value>
  </data>
  <data name="ReturnToCatalogue" xml:space="preserve">
    <value>Return to the catalogue</value>
  </data>
  <data name="Step" xml:space="preserve">
    <value>Step</value>
  </data>
  <data name="AboutTheTrip" xml:space="preserve">
    <value>About the trip</value>
  </data>
  <data name="ApproximatePrice" xml:space="preserve">
    <value>Approximate price of trip</value>
  </data>
  <data name="Calculation" xml:space="preserve">
    <value>Calculated</value>
  </data>
  <data name="CalculationFor" xml:space="preserve">
    <value>Calculation for</value>
  </data>
  <data name="Car" xml:space="preserve">
    <value>Car</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="Distance" xml:space="preserve">
    <value>Distance</value>
  </data>
  <data name="Dollars" xml:space="preserve">
    <value>dollars</value>
  </data>
  <data name="EnterCityName" xml:space="preserve">
    <value>enter city name</value>
  </data>
  <data name="EUR" xml:space="preserve">
    <value>eur</value>
  </data>
  <data name="Euro" xml:space="preserve">
    <value>euro</value>
  </data>
  <data name="Km" xml:space="preserve">
    <value>km</value>
  </data>
  <data name="MoreDetails" xml:space="preserve">
    <value>More details on your trip</value>
  </data>
  <data name="MoreDetailsExplanation" xml:space="preserve">
    <value>For instance, places and points you plan to visit on the way</value>
  </data>
  <data name="NumberOfCars" xml:space="preserve">
    <value>Number of cars</value>
  </data>
  <data name="Or" xml:space="preserve">
    <value>or</value>
  </data>
  <data name="RecountIn" xml:space="preserve">
    <value>Recount in</value>
  </data>
  <data name="Ruble" xml:space="preserve">
    <value>ruble</value>
  </data>
  <data name="RUR" xml:space="preserve">
    <value>rur</value>
  </data>
  <data name="StartingPoint" xml:space="preserve">
    <value>Starting point</value>
  </data>
  <data name="UAH" xml:space="preserve">
    <value>uah</value>
  </data>
  <data name="USD" xml:space="preserve">
    <value>usd</value>
  </data>
  <data name="WhereToGo" xml:space="preserve">
    <value>Where to go</value>
  </data>
  <data name="AllNews" xml:space="preserve">
    <value>All news</value>
  </data>
  <data name="News" xml:space="preserve">
    <value>News</value>
  </data>
  <data name="BusinessClass" xml:space="preserve">
    <value>Business class</value>
  </data>
  <data name="ClassBusinessCalculation" xml:space="preserve">
    <value>Calculation for "Business" class</value>
  </data>
  <data name="ClassLuxCalculation" xml:space="preserve">
    <value>Calculation for "Lux" class</value>
  </data>
  <data name="ClassMiddleCalculation" xml:space="preserve">
    <value>Calculation for "Middle" class</value>
  </data>
  <data name="ClassMinivanCalculation" xml:space="preserve">
    <value>Calculation for "Minivan" class</value>
  </data>
  <data name="ClassMultivanCalculation" xml:space="preserve">
    <value>Calculation for "Mulitivan" class</value>
  </data>
  <data name="ClassStandardCalculation" xml:space="preserve">
    <value>Calculation for "Standard" class</value>
  </data>
  <data name="LuxClass" xml:space="preserve">
    <value>Lux class</value>
  </data>
  <data name="MiddleClass" xml:space="preserve">
    <value>Middle class</value>
  </data>
  <data name="MinivanClass" xml:space="preserve">
    <value>Minivans</value>
  </data>
  <data name="MultivanClass" xml:space="preserve">
    <value>Multivans</value>
  </data>
  <data name="ChooseTheCar" xml:space="preserve">
    <value>Choose the car</value>
  </data>
  <data name="StandardClass" xml:space="preserve">
    <value>Standard class</value>
  </data>
  <data name="CalculatedIndividually" xml:space="preserve">
    <value>Calculated individually. To be sent on indicated email.</value>
  </data>
  <data name="AboutYou" xml:space="preserve">
    <value>About you</value>
  </data>
  <data name="ContactPhone" xml:space="preserve">
    <value>Contact phone</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>E-mail</value>
  </data>
  <data name="YourName" xml:space="preserve">
    <value>Your name</value>
  </data>
  <data name="RequestSentMessage" xml:space="preserve">
    <value>Your order was succesfully sent. Our manger will contact you as soon as possible.</value>
  </data>
  <data name="RequestWasSent" xml:space="preserve">
    <value>Order sent</value>
  </data>
  <data name="CarsChosed" xml:space="preserve">
    <value>You chosed following car(s)</value>
  </data>
  <data name="IncorrectEmail" xml:space="preserve">
    <value>Enter email in the correct format (e.g. email@domain.com)</value>
  </data>
  <data name="IncorrectPhone" xml:space="preserve">
    <value>Enter phone in the correct international or local format</value>
  </data>
  <data name="Route" xml:space="preserve">
    <value>Route</value>
  </data>
  <data name="RouteAnnotation" xml:space="preserve">
    <value>More info on your route</value>
  </data>
  <data name="VerifyYourData" xml:space="preserve">
    <value>Please verify entered data</value>
  </data>
  <data name="YourContactData" xml:space="preserve">
    <value>Your contact details</value>
  </data>
  <data name="WriteToUs" xml:space="preserve">
    <value>Please contact us using our feedback form</value>
  </data>
  <data name="YourMessage" xml:space="preserve">
    <value>Your message</value>
  </data>
  <data name="CaptchaInvalid" xml:space="preserve">
    <value>Invalid captcha</value>
  </data>
  <data name="EnterCaptcha" xml:space="preserve">
    <value>Enter captcha symbols</value>
  </data>
  <data name="Feedback" xml:space="preserve">
    <value>Feedback</value>
  </data>
  <data name="AddingToOrder" xml:space="preserve">
    <value>Adding to order</value>
  </data>
  <data name="MessageSentAnswer" xml:space="preserve">
    <value>Your message was sent. Highly appreciated.</value>
  </data>
  <data name="MessageWasSent" xml:space="preserve">
    <value>Message was sent</value>
  </data>
  <data name="OrderWasAdded" xml:space="preserve">
    <value>The order was succesfully sent!</value>
  </data>
  <data name="WaitForCall" xml:space="preserve">
    <value>Wait for our dealer's call.</value>
  </data>
</root>